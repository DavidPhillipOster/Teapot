// Martin Newell's Teapot with a bottom added
// After TeaPotWithBot.shape - Created by: crow.pa at February 28, 1986 11:09:32 am PST
// Use symmetry to just draw the positive Y bezier patches.
//
// TODO: close off the caps to make manifold components that can be unioned.

include <BOSL2/std.scad>
include <BOSL2/beziers.scad>

/* patches is an array, length patch, of patch */
/* patch is an array[0..3, 0..3] of int */
// typedef int Patch[4][4];



patches = [
// top rim
[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]], /* 1 */
[[3, 16, 17, 18], [7, 19, 20, 21], [11, 22, 23, 24], [15, 25, 26, 27]], /* 2 */
// bowl
[[12, 13, 14, 15], [28, 29, 30, 31], [32, 33, 34, 35], [36, 37, 38, 39]], /* 3 */
[[15, 25, 26, 27], [31, 40, 41, 42], [35, 43, 44, 45], [39, 46, 47, 48]], /* 4 */
[[36, 37, 38, 39], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60]], /* 5 */
[[39, 46, 47, 48], [52, 61, 62, 63], [56, 64, 65, 66], [60, 67, 68, 69]], /* 6 */
// handle
[[70, 71, 72, 73], [74, 75, 76, 77], [78, 79, 80, 81], [82, 83, 84, 85]], /* 7 */
[[82, 83, 84, 85], [86, 87, 88, 89], [90, 91, 92, 93], [94, 95, 96, 36]], /* 8 */
// spout
[[97, 98, 99, 100], [101, 102, 103, 104], [105, 106, 107, 108], [109, 110, 111, 112]], /* 9 */
// lip
[[109, 110, 111, 112], [113, 114, 115, 116], [117, 118, 119, 120], [121, 122, 123, 124]], /* 10 */
// handle
[[125, 125, 125, 125], [126, 127, 128, 129], [130, 130, 130, 130], [131, 132, 133, 134]], /* 11 */
[[125, 125, 125, 125], [129, 135, 136, 137], [130, 130, 130, 130], [134, 138, 139, 140]], /* 12 */
[[131, 132, 133, 134], [141, 142, 143, 144], [145, 146, 147, 148], [149, 150, 151, 152]], /* 13 */
[[134, 138, 139, 140], [144, 153, 154, 155], [148, 156, 157, 158], [152, 159, 160, 161]], /* 14 */
// base
[[162, 162, 162, 162], [163, 164, 165, 166], [167, 168, 169, 170], [171, 172, 173, 174]], /* 15 */
[[162, 162, 162, 162], [166, 175, 176, 177], [170, 178, 179, 180], [174, 181, 182, 183]]]; /* 16 */

ducks = [
[ -1.4,     0,   2.4],
[ -1.4, 0.784,   2.4],
[-0.784,   1.4,   2.4],
[    0,   1.4,   2.4],
[-1.34,     0,  2.53],
[-1.34, 0.749,  2.53],
[-0.749,  1.34,  2.53],
[    0,  1.34,  2.53],
[-1.44,     0,  2.53],
[-1.44, 0.805,  2.53],
[-0.805,  1.44,  2.53],
[    0,  1.44,  2.53],
[ -1.5,     0,   2.4],
[ -1.5,  0.84,   2.4],
[-0.84,   1.5,   2.4],
[    0,   1.5,   2.4],
[0.784,   1.4,   2.4],
[  1.4, 0.784,   2.4],
[  1.4,     0,   2.4],
[0.749,  1.34,  2.53],
[ 1.34, 0.749,  2.53],
[ 1.34,     0,  2.53],
[0.805,  1.44,  2.53],
[ 1.44, 0.805,  2.53],
[ 1.44,     0,  2.53],
[ 0.84,   1.5,   2.4],
[  1.5,  0.84,   2.4],
[  1.5,     0,   2.4],
[-1.75,     0,  1.88],
[-1.75,  0.98,  1.88],
[-0.98,  1.75,  1.88],
[    0,  1.75,  1.88],
[   -2,     0,  1.35],
[   -2,  1.12,  1.35],
[-1.12,     2,  1.35],
[    0,     2,  1.35],
[   -2,     0,   0.9],
[   -2,  1.12,   0.9],
[-1.12,     2,   0.9],
[    0,     2,   0.9],
[ 0.98,  1.75,  1.88],
[ 1.75,  0.98,  1.88],
[ 1.75,     0,  1.88],
[ 1.12,     2,  1.35],
[    2,  1.12,  1.35],
[    2,     0,  1.35],
[ 1.12,     2,   0.9],
[    2,  1.12,   0.9],
[    2,     0,   0.9],
[   -2,     0,  0.45],
[   -2,  1.12,  0.45],
[-1.12,     2,  0.45],
[    0,     2,  0.45],
[ -1.5,     0, 0.225],
[ -1.5,  0.84, 0.225],
[-0.84,   1.5, 0.225],
[    0,   1.5, 0.225],
[ -1.5,     0,  0.15],
[ -1.5,  0.84,  0.15],
[-0.84,   1.5,  0.15],
[    0,   1.5,  0.15],
[ 1.12,     2,  0.45],
[    2,  1.12,  0.45],
[    2,     0,  0.45],
[ 0.84,   1.5, 0.225],
[  1.5,  0.84, 0.225],
[  1.5,     0, 0.225],
[ 0.84,   1.5,  0.15],
[  1.5,  0.84,  0.15],
[  1.5,     0,  0.15],
[ -1.5,     0,  2.25],
[ -1.5,   0.3,  2.25],
[ -1.6,   0.3,  2.03],
[ -1.6,     0,  2.03],
[ -2.5,     0,  2.25],
[ -2.5,   0.3,  2.25],
[ -2.3,   0.3,  2.03],
[ -2.3,     0,  2.03],
[   -3,     0,  2.25],
[   -3,   0.3,  2.25],
[ -2.7,   0.3,  2.03],
[ -2.7,     0,  2.03],
[   -3,     0,   1.8],
[   -3,   0.3,   1.8],
[ -2.7,   0.3,   1.8],
[ -2.7,     0,   1.8],
[   -3,     0,  1.35],
[   -3,   0.3,  1.35],
[ -2.7,   0.3,  1.58],
[ -2.7,     0,  1.58],
[-2.65,     0, 0.938],
[-2.65,   0.3, 0.938],
[ -2.5,   0.3,  1.12],
[ -2.5,     0,  1.12],
[ -1.9,     0,   0.6],
[ -1.9,   0.3,   0.6],
[   -2,   0.3,   0.9],
[  1.7,     0,   0.6],
[  1.7,  0.66,   0.6],
[  1.7,  0.66,  1.42],
[  1.7,     0,  1.42],
[  3.1,     0, 0.825],
[  3.1,  0.66, 0.825],
[  2.6,  0.66,  1.42],
[  2.6,     0,  1.42],
[  2.4,     0,  2.03],
[  2.4,  0.25,  2.03],
[  2.3,  0.25,   2.1],
[  2.3,     0,   2.1],
[  3.3,     0,   2.4],
[  3.3,  0.25,   2.4],
[  2.7,  0.25,   2.4],
[  2.7,     0,   2.4],
[ 3.53,     0,  2.49],
[ 3.53,  0.25,  2.49],
[  2.8,  0.25,  2.47],
[  2.8,     0,  2.47],
[ 3.45,     0,  2.51],
[ 3.45,  0.15,  2.51],
[  2.9,  0.15,  2.47],
[  2.9,     0,  2.47],
[  3.2,     0,   2.4],
[  3.2,  0.15,   2.4],
[  2.8,  0.15,   2.4],
[  2.8,     0,   2.4],
[    0,     0,  3.15],
[ -0.8,     0,  3.15],
[ -0.8,  0.45,  3.15],
[-0.45,   0.8,  3.15],
[    0,   0.8,  3.15],
[    0,     0,  2.85],
[ -0.2,     0,   2.7],
[ -0.2, 0.112,   2.7],
[-0.112,   0.2,   2.7],
[    0,   0.2,   2.7],
[ 0.45,   0.8,  3.15],
[  0.8,  0.45,  3.15],
[  0.8,     0,  3.15],
[0.112,   0.2,   2.7],
[  0.2, 0.112,   2.7],
[  0.2,     0,   2.7],
[ -0.4,     0,  2.55],
[ -0.4, 0.224,  2.55],
[-0.224,   0.4,  2.55],
[    0,   0.4,  2.55],
[ -1.3,     0,  2.55],
[ -1.3, 0.728,  2.55],
[-0.728,   1.3,  2.55],
[    0,   1.3,  2.55],
[ -1.3,     0,   2.4],
[ -1.3, 0.728,   2.4],
[-0.728,   1.3,   2.4],
[    0,   1.3,   2.4],
[0.224,   0.4,  2.55],
[  0.4, 0.224,  2.55],
[  0.4,     0,  2.55],
[0.728,   1.3,  2.55],
[  1.3, 0.728,  2.55],
[  1.3,     0,  2.55],
[0.728,   1.3,   2.4],
[  1.3, 0.728,   2.4],
[  1.3,     0,   2.4],
[    0,     0,     0],
[ 1.42,     0,     0],
[ 1.42, 0.798,     0],
[0.798,  1.42,     0],
[    0,  1.42,     0],
[  1.5,     0, 0.075],
[  1.5,  0.84, 0.075],
[ 0.84,   1.5, 0.075],
[    0,   1.5, 0.075],
[  1.5,     0,  0.15],
[  1.5,  0.84,  0.15],
[ 0.84,   1.5,  0.15],
[    0,   1.5,  0.15],
[-0.798,  1.42,     0],
[-1.42, 0.798,     0],
[-1.42,     0,     0],
[-0.84,   1.5, 0.075],
[ -1.5,  0.84, 0.075],
[ -1.5,     0, 0.075],
[-0.84,   1.5,  0.15],
[ -1.5,  0.84,  0.15],
[ -1.5,     0,  0.15]];

function Scale3(n, v) = [n*v[0], n*v[1], n*v[2]];
function FlipY3(v) = [v[0], -v[1], v[2]];
function indexToPoints2(a) = [for (i=[0:len(a)-1]) Scale3(30,ducks[a[i]]) ];
function indexToPoints(a) = [for (i=[0:len(a)-1]) indexToPoints2(a[i])];
function indexToPoints2R(a) = [for (i=[len(a)-1:-1:0]) Scale3(30,FlipY3(ducks[a[i]])) ];
function indexToPointsR(a) = [for (i=[0:len(a)-1]) indexToPoints2R(a[i])];


module halfPot(){
  scale([30,30,30])for (i=[0:len(patches)-1]) {
    debug_bezier_patches(patches=[indexToPoints(patches[i])], size=0.03, showcps=true);
  }
}

module fullHandle(){
  vnf_polyhedron(bezier_vnf(patches=[
    indexToPoints(patches[6]),
    indexToPoints(patches[7]),
    indexToPointsR(patches[7]),
    indexToPointsR(patches[6]),

    indexToPoints([[73, 72, 71, 70], [70, 71, 72, 73]]),  // upper cap
    indexToPointsR([[73, 72, 71, 70], [70, 71, 72, 73]]),
    indexToPoints([[94, 95, 96, 36], [36, 96, 95, 94]]),  // lower cap
    indexToPointsR([[94, 95, 96, 36],[36, 96, 95, 94]]),

  ]));
}

module fullSpout(){
  vnf_polyhedron(bezier_vnf(patches=[
    indexToPoints(patches[8]),
    indexToPoints([[100, 99, 98, 97], [97, 98, 99, 100]]), // big cap
    indexToPoints([[109, 110, 111, 112],[112, 111, 110, 109]]), // small cap

    indexToPointsR(patches[8]),
    indexToPointsR([[100, 99, 98, 97], [97, 98, 99, 100]]), // big cap, -Y
    indexToPointsR([[109, 110, 111, 112], [112, 111, 110, 109]]) // small cap, -Y.
    ]));
}

module pot(){
  halfPot();
  mirror([0,1,0])halfPot();
}

module pot2(){
  for (i=[0:len(patches)-1]) {
    vnf_polyhedron(bezier_vnf(patches=[indexToPoints(patches[i])], splinesteps=32));
  }
}

%pot2();
fullHandle();
fullSpout();
